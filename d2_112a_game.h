PATCH_BEGIN("D2Game.dll", 0xec2509e8)

PATCH_VAR(0x8520, _strcpy_d2game_112a)

/* Eastern Sun 3.00 R6D - increased save size patch */
/*size checks*/
PATCH(0x6267E, LE_BYTES(SAVE_SIZE))
PATCH(0xD2BCE, LE_BYTES(SAVE_SIZE))
PATCH(0xD2BE0, LE_BYTES(SAVE_SIZE))
PATCH_ORIG(0x6267E, 0x00, 0x20, 0x00, 0x00)
PATCH_ORIG(0xD2BCE, 0x00, 0x20, 0x00, 0x00)
PATCH_ORIG(0xD2BE0, 0x00, 0x20, 0x00, 0x00)

/**/
/* PlugY incorrectly patches this function, such that the exact size of the frame matters */
/* Ergo, we patch it in a roundabout way. */
PATCH(0x44169, 0xE8)
PATCH_REL(0x4416A, StupidPlugYHackaround_112a)
PATCH(0x4416E, 0x90, 0x90)
PATCH(0x4418B, LE_BYTES(SAVE_SIZE + 0x620))
PATCH(0x44192, LE_BYTES(SAVE_SIZE + 0x61C))
PATCH(0x4419E, LE_BYTES(SAVE_SIZE + 0x60C))
PATCH(0x441A3, LE_BYTES(SAVE_SIZE))
PATCH(0x441AF, LE_BYTES(SAVE_SIZE + 0x610))
PATCH(0x44207, LE_BYTES(SAVE_SIZE + 0x5F8))
PATCH(0x44220, 0xEB, 0xE1 /* jmp short 0x44203 */)
PATCH(0x441CF, 0x34 /* {jle short} 0x44204 */)
PATCH_ORIG(0x44169, 0x8B, 0x84, 0x24, 0x08, 0x26, 0x00, 0x00)
PATCH_ORIG(0x4418B, 0x20, 0x26, 0x00, 0x00)
PATCH_ORIG(0x44192, 0x1C, 0x26, 0x00, 0x00)
PATCH_ORIG(0x4419E, 0x0C, 0x26, 0x00, 0x00)
PATCH_ORIG(0x441A3, 0x00, 0x20, 0x00, 0x00)
PATCH_ORIG(0x441AF, 0x10, 0x26, 0x00, 0x00)
PATCH_ORIG(0x44207, 0xF8, 0x25, 0x00, 0x00)
PATCH_ORIG(0x44220, 0x5E, 0x5F)
PATCH_ORIG(0x441CF, 0x51)

/**/
PATCH(0x44231, LE_BYTES(SAVE_SIZE + 0x38))
PATCH(0x4424C, LE_BYTES(SAVE_SIZE + 0x54))
PATCH(0x44253, LE_BYTES(SAVE_SIZE))
PATCH(0x4425F, LE_BYTES(SAVE_SIZE + 0x54))
PATCH(0x44281, LE_BYTES(SAVE_SIZE + 0x38))
PATCH(0x44475, LE_BYTES(SAVE_SIZE + 0x54))
PATCH(0x4447C, LE_BYTES(SAVE_SIZE + 0x50))
PATCH(0x44484, LE_BYTES(SAVE_SIZE + 0x64))
PATCH(0x4448D, LE_BYTES(SAVE_SIZE + 0x60))
PATCH(0x4449C, LE_BYTES(SAVE_SIZE + 0x38))
PATCH(0x444A6, LE_BYTES(SAVE_SIZE + 0x60))
PATCH(0x444F4, LE_BYTES(SAVE_SIZE + 0x58))
PATCH(0x444FF, LE_BYTES(SAVE_SIZE + 0x54))
PATCH(0x44507, LE_BYTES(SAVE_SIZE + 0x54))
PATCH(0x4451A, LE_BYTES(SAVE_SIZE + 0x70))
PATCH(0x4453B, LE_BYTES(SAVE_SIZE + 0x38))
PATCH_ORIG(0x44231, 0x38, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4424C, 0x54, 0x20, 0x00, 0x00)
PATCH_ORIG(0x44253, 0x00, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4425F, 0x54, 0x20, 0x00, 0x00)
PATCH_ORIG(0x44281, 0x38, 0x20, 0x00, 0x00)
PATCH_ORIG(0x44475, 0x54, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4447C, 0x50, 0x20, 0x00, 0x00)
PATCH_ORIG(0x44484, 0x64, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4448D, 0x60, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4449C, 0x38, 0x20, 0x00, 0x00)
PATCH_ORIG(0x444A6, 0x60, 0x20, 0x00, 0x00)
PATCH_ORIG(0x444F4, 0x58, 0x20, 0x00, 0x00)
PATCH_ORIG(0x444FF, 0x54, 0x20, 0x00, 0x00)
PATCH_ORIG(0x44507, 0x54, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4451A, 0x70, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4453B, 0x38, 0x20, 0x00, 0x00)

/**/
PATCH(0x46481, LE_BYTES(SAVE_SIZE + 0x5F8))
PATCH(0x4648D, LE_BYTES(SAVE_SIZE + 0x608))
PATCH(0x464B3, LE_BYTES(SAVE_SIZE + 0x614))
PATCH(0x464ED, LE_BYTES(SAVE_SIZE))
PATCH(0x4653A, LE_BYTES(SAVE_SIZE + 0x5F8))
PATCH(0x46549, LE_BYTES(SAVE_SIZE + 0x624))
PATCH(0x46550, LE_BYTES(SAVE_SIZE + 0x620))
PATCH(0x4655F, LE_BYTES(SAVE_SIZE + 0x614))
PATCH(0x46567, LE_BYTES(SAVE_SIZE + 0x614))
PATCH(0x46584, LE_BYTES(SAVE_SIZE + 0x624))
PATCH(0x4658B, LE_BYTES(SAVE_SIZE + 0x620))
PATCH(0x46592, LE_BYTES(SAVE_SIZE + 0x61C))
PATCH(0x4659C, LE_BYTES(SAVE_SIZE + 0x61C))
PATCH(0x465A8, LE_BYTES(SAVE_SIZE + 0x61C))
PATCH(0x465CC, LE_BYTES(SAVE_SIZE + 0x618))
PATCH(0x465E1, LE_BYTES(SAVE_SIZE + 0x5F8))
PATCH_ORIG(0x46481, 0xF8, 0x25, 0x00, 0x00)
PATCH_ORIG(0x4648D, 0x08, 0x26, 0x00, 0x00)
PATCH_ORIG(0x464B3, 0x14, 0x26, 0x00, 0x00)
PATCH_ORIG(0x464ED, 0x00, 0x20, 0x00, 0x00)
PATCH_ORIG(0x4653A, 0xF8, 0x25, 0x00, 0x00)
PATCH_ORIG(0x46549, 0x24, 0x26, 0x00, 0x00)
PATCH_ORIG(0x46550, 0x20, 0x26, 0x00, 0x00)
PATCH_ORIG(0x4655F, 0x14, 0x26, 0x00, 0x00)
PATCH_ORIG(0x46567, 0x14, 0x26, 0x00, 0x00)
PATCH_ORIG(0x46584, 0x24, 0x26, 0x00, 0x00)
PATCH_ORIG(0x4658B, 0x20, 0x26, 0x00, 0x00)
PATCH_ORIG(0x46592, 0x1C, 0x26, 0x00, 0x00)
PATCH_ORIG(0x4659C, 0x1C, 0x26, 0x00, 0x00)
PATCH_ORIG(0x465A8, 0x1C, 0x26, 0x00, 0x00)
PATCH_ORIG(0x465CC, 0x18, 0x26, 0x00, 0x00)
PATCH_ORIG(0x465E1, 0xF8, 0x25, 0x00, 0x00)

PATCH_END()
